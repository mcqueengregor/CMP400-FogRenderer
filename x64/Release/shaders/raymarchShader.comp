#version 430
layout (local_size_x = 1280, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D imgOutput;

#define MAX_DIST 50
#define MAX_STEPS 100
#define MIN_DIST 0.01

layout (std140) uniform Matrices
{
	mat4 proj;
	mat4 view;
} u_matrices;

uniform float   u_time;
uniform float   u_kParam;
uniform vec3    u_cameraPos;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

// Polynomial smooth min 2 from iq's website, available at: https://www.iquilezles.org/www/articles/smin/smin.htm
float PolySmoothMin(float a, float b, float k)
{
    float h = max(k - abs(a-b), 0.0) / k;
    return min(a,b) - h * h * k * (1.0/4.0);
}

float GetDist(vec3 p)
{
    vec4 sphere = vec4(0, 1, 6, 1); // (w-component is sphere's radius)
    
    // Get distance to scene objects (sphere and axis-aligned plane)
    float sphereDist = length(p - sphere.xyz) - sphere.w;
    float planeDist = p.y;
    
    // Use mouse y-position to control smooth minimum k-parameter:

    return PolySmoothMin(sphereDist, planeDist, u_kParam);
    return min(sphereDist, planeDist);   
}

float RayMarch(vec3 ro, vec3 rd)
{
    float dO = 0.0; // Starting distance from ray origin.
    
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        vec3 p = ro + rd * dO; // Point ray has currently reached.
        float dS = GetDist(p);
        dO += dS;
        
        // If ray has marched too far or hit an object, return distance:
        if (dO > MAX_DIST || dS < MIN_DIST)
            break;
    }
    return dO;
}

float RayMarch(Ray r)
{
    float dO = 0.0; // Starting distance from ray origin.
    
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        vec3 p = r.origin + r.direction * dO; // Point ray has currently reached.
        float dS = GetDist(p);
        dO += dS;
        
        // If ray has marched too far or hit an object, return distance:
        if (dO > MAX_DIST || dS < MIN_DIST)
            break;
    }
    return dO;
}

// Calculate normal numerically by finding distance of points very close to p:
vec3 GetNormal(vec3 p)
{
    float d = GetDist(p);
    const vec2 e = vec2(0.01, 0);
    
    vec3 n = d - vec3(
        GetDist(p-e.xyy),
        GetDist(p-e.yxy),
        GetDist(p-e.yyx));
    
    return normalize(n);
}

float GetLight(vec3 p)
{
    vec3 lightPos = vec3(2. * sin(u_time), 5, 6.0 - 2.0 * cos(u_time));
    vec3 l = normalize(lightPos - p);
    vec3 n = GetNormal(p);
    
    float diff = clamp(dot(l, n), 0., 1.);
    
    // Perform second raymarch from point to light position:
    Ray pointToLight;
    pointToLight.origin = p + n * (MIN_DIST * 2.0);
    pointToLight.direction = l;
    float d = RayMarch(pointToLight);
    
    // If closest ray hit point is closer to light than current point, point is in shadow:
    if (d < length(lightPos-p))
        diff *= 0.25;
    
    return diff;
}

void main()
{
	vec3 colour = vec3(1.0, 1.0, 1.0);

	// Normalise UV coords to the range [-1,1]:
    vec2 frameSize = imageSize(imgOutput);
    vec2 uv = vec2(gl_GlobalInvocationID.xy - (frameSize * 0.5)) / frameSize.y;
    
    Ray ray;
    ray.origin = u_cameraPos;
    ray.origin.z *= -1; // Convert right-handed system to left-handed system:

    // Transform ray direction to camera's view:
    ray.direction = vec3(uv.xy, 1.) * mat3(u_matrices.view);
     
    float d = RayMarch(ray);
    vec3 p = ray.origin + ray.direction * d;
    
    vec3 col = ((GetNormal(p) * 0.5) + 0.5) * vec3(GetLight(p));
    colour = pow(colour, vec3(0.4545));
    
	imageStore(imgOutput, ivec2(gl_GlobalInvocationID.xy), vec4(col, 1.0));
}