#version 430
layout (local_size_x = 16, local_size_y = 9, local_size_z = 1) in;
layout (rgba32f, binding = 2) uniform image3D imgInput;
layout (rgba32f, binding = 3) uniform image3D imgOutput;

// Based on Wronski's chapter on volumetric fog in GPU Pro 360, chapt. 18:

const uint TEX_DEPTH = 64;

float getFroxelDepth(uint z)
{
	const float near = 0.1, far = 150.0;
	float farOverNear = far / near;
	return near * pow(farOverNear, float(z) / (float(TEX_DEPTH) - 1.0));
}

vec4 accumulateScattering(vec4 currentSlice, vec4 nextSlice)
{
	// Apply transmittance to in-scattered light accumulated so far:
	vec3 light = currentSlice.rgb + clamp(exp(-currentSlice.a), 0.0, 1.0) * nextSlice.rgb;
	return vec4(light, currentSlice.a + nextSlice.a);
}

void outputResults(ivec3 writePos, vec4 outputVal)
{
	// Write final light values to texture. RGB is in-scattered light accumulated so far, alpha is scene light extinction from out-scattering:
	vec4 finalVal = vec4(outputVal.rgb, exp(-outputVal.a));
	imageStore(imgOutput, writePos, finalVal);
}

void hillaireIntegration()
{
	// Accumulate scattering and transmittance for each texture slice:
	vec4 integScattTrans = vec4(0.0, 0.0, 0.0, 1.0);
	float prevFroxelDepth = getFroxelDepth(0);

	for (uint z = 0; z < TEX_DEPTH; ++z)
	{
		const ivec3 coords = ivec3(gl_GlobalInvocationID.xy, z);
		
		float currentFroxelDepth = getFroxelDepth(z);
		float stepLength = currentFroxelDepth - prevFroxelDepth;
		prevFroxelDepth = currentFroxelDepth;

		vec4 scatteringExt = imageLoad(imgInput, coords);
		const vec3 scattering = scatteringExt.rgb;
		const float ext = max(scatteringExt.a, 0.000001);
		const float trans = exp(-scatteringExt.a * stepLength);

		const vec3 integScatt = (scattering - scattering * trans) / ext;

		integScattTrans.rgb += integScattTrans.a * integScatt;
		integScattTrans.a *= trans;

		imageStore(imgOutput, coords, integScattTrans);
	}
}

void wronskiIntegration()
{
	// Get scattering and extinction from the first slice texel:
	vec4 currentSliceVal = imageLoad(imgInput, ivec3(gl_GlobalInvocationID.xy, 0.0));

	// Write data from first slice of input texture into first slice of output texture:
	imageStore(imgOutput, ivec3(gl_GlobalInvocationID.xy, 0.0), currentSliceVal);

	// Accumulate scattering and transmittance for each texture slice:
	for (uint z = 1; z < TEX_DEPTH; ++z)
	{
		const ivec3 coords = ivec3(gl_GlobalInvocationID.xy, z);
		
		// Read scattering and extinction values from input 3D texture:
		vec4 nextSliceVal = imageLoad(imgInput, coords);
		currentSliceVal = accumulateScattering(currentSliceVal, nextSliceVal);
		
		outputResults(coords, currentSliceVal);
	}
}

void main()
{
	hillaireIntegration();
	//wronskiIntegration();
}