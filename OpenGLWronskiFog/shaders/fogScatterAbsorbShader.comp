#version 430
layout (local_size_x = 1, local_size_y = 9, local_size_z = 1) in;
layout (rgba32f, binding = 1) uniform image3D imgOutput;

// Based on Wronski's chapter on volumetric fog in GPU Pro 360, chapt. 18:

#define PI 3.141592653589793238462643383279
#define MAX_LIGHTS 8
const float MAX_FROXEL_DEPTH = 467.5060701;		// Given by FroxelDepth(63), assuming imgOutput has a z-depth of 64.

layout (std140) uniform Matrices
{
	mat4 proj;
	mat4 view;

	mat4 invViewProj;
	mat4 prevViewProj;
} u_matrices;

struct PointLight
{
    vec3 position;
    vec3 diffuse;

    float constant;
    float linear;
    float quadratic;
};

uniform mat4 u_lightMatrices[6];

// Camera data uniforms:
uniform vec3	u_cameraPos;
uniform vec3	u_cameraForward;
uniform float	u_farPlane;

// Fog data uniforms:
uniform vec3	u_albedo;
uniform float	u_scatteringCoefficient;
uniform float	u_absorptionCoefficient;
uniform vec2	u_fogHeightRange;
uniform float	u_phaseGParam;
uniform float	u_fogDensity;
uniform float	u_lightIntensity;
uniform bool	u_useHetFog;
uniform int		u_frameIndex;

// Noise data uniforms:
uniform float	u_noiseFreq;
uniform vec3	u_noiseOffset;

// Light data uniforms:
uniform int			u_numLights;
uniform float		u_lightFarPlane;
uniform PointLight	u_pointLights[MAX_LIGHTS];
uniform sampler2DArray u_pointShadowmapArray;
uniform sampler3D u_previousFrameFog;
uniform bool u_useShadows;
uniform bool u_useTemporal;

// Noise function is from Ken Perlin's Improved Noise implementation: https://cs.nyu.edu/~perlin/noise/
// Permuation of pseudo-random vector gradients:
const int perm[] = { 151,160,137,91,90,15,
   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
   };

float fade(float t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}

float noiseLerp(float t, float a, float b)
{
	return a + t * (b - a);
}

float grad(int hash, float x, float y, float z)
{
	int h = hash & 15;
	float	u = h < 8 ? x : y,
			v = h < 4 ? y : h==12 || h==14 ? x : z;
	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float perlinNoise(vec3 p)
{
	int X = int(floor(p.x)) & 255,
		Y = int(floor(p.y)) & 255,
		Z = int(floor(p.z)) & 255;

	// Isolate decimal values of p:
	p.x -= floor(p.x);
	p.y -= floor(p.y);
	p.z -= floor(p.z);

	float	u = fade(p.x),
			v = fade(p.y),
			w = fade(p.z);

	int A = perm[X  ] + Y, AA = perm[A] + Z, AB = perm[A+1] + Z,
		B = perm[X+1] + Y, BA = perm[B] + Z, BB = perm[B+1] + Z;

	return noiseLerp(w,		noiseLerp(v,	noiseLerp(u,	grad(perm[AA  ],	p.x,	p.y,	p.z		),
															grad(perm[BA  ],	p.x-1,	p.y,	p.z		)),
											noiseLerp(u,	grad(perm[AB  ],	p.x,	p.y-1,	p.z		),
															grad(perm[BB  ],	p.x-1,	p.y-1,	p.z		))),
							noiseLerp(v,	noiseLerp(u,	grad(perm[AA+1],	p.x,	p.y,	p.z-1	),
															grad(perm[BA+1],	p.x-1,	p.y,	p.z-1	)),
											noiseLerp(u,	grad(perm[AB+1],	p.x,	p.y-1,	p.z-1	),
															grad(perm[BB+1],	p.x-1,	p.y-1,	p.z-1	))));
}

float invLerp(float a, float b, float v)
{
	return (v - a) / (b - a);
}

float remap(float iMin, float iMax, float oMin, float oMax, float val)
{
	float t = invLerp(iMin, iMax, val);
	return mix(oMin, oMax, t);
}

float getFroxelDepth(float slice)
{
	const float C = 8.0;
	const float Q = 1.0;

	return pow(2, (slice + Q * C) / C) - pow(2, Q);
}

float getSliceThickness(uint slice)
{
	return getFroxelDepth(slice + 1) - getFroxelDepth(slice);
}

float getSliceIndex(float depth)
{
	const float ln2 = 0.6931471806;	// ln(2).
	return (8.0 * log((depth + 2.0) / 2.0)) / ln2;
}

bool outsideShadowmapBounds(vec3 projectedCoords)
{
	// Return whether projected NDC coords are within a light's frustum or not (i.e. if 0 < pCoords < 1):
	return projectedCoords.x < 0.0 || projectedCoords.x > 1.0 || projectedCoords.y < 0.0 || projectedCoords.y > 1.0
		|| projectedCoords.z > 1.0;
}

float calcShadow(vec3 worldPos)
{
	// Iterate through all layers of shadowmap texture array:
	for (int i = 0; i < 6; ++i)
	{
		// Transform world position to light space:
		vec4 lightSpacePos = u_lightMatrices[i] * vec4(worldPos, 1.0);

		// Perform perspective division:
		vec3 projectedCoords = lightSpacePos.xyz / lightSpacePos.w;

		// Transform from [-1,1] range to [0,1] range:
		projectedCoords = projectedCoords * 0.5 + 0.5;

		// If projected position is within light frustum, perform shadow test:
		if (!outsideShadowmapBounds(projectedCoords))
		{
			// Get depth of closest occluder from shadowmap, scaled to [0,farPlane (squared)] range:
			vec2 moments = texture(u_pointShadowmapArray, vec3(projectedCoords.xy, float(i))).rg;
			moments.x *= u_lightFarPlane;
			moments.y *= u_lightFarPlane * u_lightFarPlane;
			
			vec3 lightDir = worldPos - u_pointLights[0].position;
			float currentDepth = length(lightDir);

			const float bias = 0.05;
			return currentDepth > moments.x + bias ? 0.0 : 1.0;

			// Ignore variance/exponential shadow test stuff until standard shadows are actually working
			float p = step(currentDepth, moments.x + bias);

			float variance = max(moments.y - moments.x * moments.x, 0.00002);
			float d = currentDepth - moments.x;

			float pMax = variance / (variance + d * d);

			return clamp(exp(-1.0 * (currentDepth - moments.x)), 0.0, 1.0);

			return max(p, pMax);
		}
	}

	// If point isn't within any light frustum, assume it's fully lit:
	return 1.0;
}

// Compute thread ID to world position logic adapted from: https://github.com/diharaw/volumetric-lighting/blob/main/src/shaders/common.glsl
float uvToNDC(float z)
{
	const float bias = 0.002;
	float reflected = 1 / (z + bias) - MAX_FROXEL_DEPTH;
	return reflected / (1 - MAX_FROXEL_DEPTH);
}

vec3 getWorldPos(uvec3 globalThreadID, float jitter)
{
	// Get UV coordinates from current thread ID:
	vec2 frameSize = imageSize(imgOutput).xy;
	vec3 uv = vec3(globalThreadID.xy / frameSize, getFroxelDepth(globalThreadID.z + jitter) / MAX_FROXEL_DEPTH);

	// Get NDC equivalent of this thread's UV coordinates:
	vec3 ndc = 2.0 * vec3(uv.xy, uvToNDC(uv.z)) - 1.0;

	// Use inverse view * proj matrix to get world position:
	vec4 world = u_matrices.invViewProj * vec4(ndc, 1.0);

	world.xyz /= world.w;

	return world.xyz;
}

vec3 getUVCoords(vec3 worldPos)
{
	// Transform world position to NDC of previous frame with previous frame's view*proj matrix:
	vec4 ndc = u_matrices.prevViewProj * vec4(worldPos, 1.0);
	ndc.xyz /= ndc.w;

	// Get UV coordinates from current thread's NDC coordinates:
	vec3 uv = vec3(ndc.xy * 0.5 + 0.5, getSliceIndex((ndc.z * 0.5 + 0.5) * u_farPlane) / MAX_FROXEL_DEPTH);

	return uv;
}

float phaseHG(uint lightIndex, vec3 worldPos, float g)
{
	vec3 lightDir = u_pointLights[lightIndex].position - worldPos;
	return 1 / (4 * PI) * (1 - g * g) / pow(1 + g * g - 2 * g * dot(u_cameraForward, normalize(lightDir)), 3 / 2);
}

// Get lighting intensity from point light (diffuse only):
vec3 calcPointLight(uint lightIndex, vec3 worldPos)
{
    // Calculate attenuation:
    float dist = length(u_pointLights[lightIndex].position - worldPos);
    float attenuation = 1.0 / (u_pointLights[lightIndex].constant + u_pointLights[lightIndex].linear * dist + u_pointLights[lightIndex].quadratic * (dist * dist));    

    return u_pointLights[lightIndex].diffuse * attenuation * u_lightIntensity;
}

float halton(float index, uint base)
{
	float r = 0.0f;
	float f = 1.0f;

	while (index > 0.0f)
	{
		f /= base;
		r += f * mod(index, float(base));
		index = floor(index / float(base));
	}
	return r;
}

void main()
{
	// Get jitter for the current thread with Halton sequences, tranformed to [-0.5, 0.5] range:
	float jitter = halton(u_frameIndex, 3);

	vec3 jitteredWorldPos = getWorldPos(gl_GlobalInvocationID, jitter);
	float thickness = getSliceThickness(gl_GlobalInvocationID.z);

	float scattering;
	float absorption;

	if (u_useHetFog)
	{
		float density = perlinNoise((jitteredWorldPos + u_noiseOffset) * u_noiseFreq) /* + remapped height stuff */;

		// Transform noise from [-1,1] range to [0,1] range:
		density = density * 0.5 + 0.5;

		// Calculate scattering and absorption for this froxel:
		scattering = u_scatteringCoefficient * thickness * density * u_fogDensity;
		absorption = u_absorptionCoefficient * thickness * density * u_fogDensity;
	}
	else
	{
		scattering = u_scatteringCoefficient * thickness * u_fogDensity;
		absorption = u_absorptionCoefficient * thickness * u_fogDensity;
	}

	vec3 lighting = vec3(0.0);

	// Accumulate lighting at this froxel:
	for (uint i = 0; i < u_numLights; ++i)
	{
		vec3 light = calcPointLight(i, jitteredWorldPos) * phaseHG(i, jitteredWorldPos, u_phaseGParam);

		if (u_useShadows)
			light *= calcShadow(jitteredWorldPos);

		lighting += light;
	}

	// Multiply accumulated lighting by fog albedo colour:
	lighting *= u_albedo;

	vec4 results = vec4(lighting * scattering, scattering + absorption);

	// Reproject to previous frame's results, if the unjittered world position can be projected to previous frame blend results:
	if (u_useTemporal)
	{
		vec3 unjitteredWorldPos = getWorldPos(gl_GlobalInvocationID, 0.0);
		vec3 blendUV = getUVCoords(unjitteredWorldPos);

		// If UV coordinates are within previous frame's frustum, blend results:
		if (all(greaterThanEqual(blendUV, vec3(0.0))) && all(lessThanEqual(blendUV, vec3(1.0))))
		{
			vec4 previousFrameResults = texture(u_previousFrameFog, blendUV);
			results = mix(results, previousFrameResults, 0.95);
		}
	}

	// Write results to output texture:
	imageStore(imgOutput, ivec3(gl_GlobalInvocationID), results);
}