#version 430 core
#define LOCAL_SIZE_X 32
#define LOCAL_SIZE_Y 8

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y) in;
layout (rgba32f, binding = 4) uniform image2D calculateLUT;

#define PI 3.141592653589793238462643383279

// Calculation parameters:
uniform float u_gParam;

uniform vec3 u_camPos;
uniform vec3 u_lightPos;

// Hoobler LUT parameters:
uniform float u_vecLength;
uniform float u_lightZFar;

shared float accumP[LOCAL_SIZE_X * LOCAL_SIZE_Y];

// Light data:
uniform float u_constant;
uniform float u_linear;
uniform float u_quadratic;

float PhongAttenuation(float dist)
{
	return 1.0 / (u_quadratic * (dist * dist) + u_linear * dist + u_constant);
}

float PhaseHG(float theta, float g)
{
	return 1.0 / (4.0 * PI) * ((1.0 - g * g) / pow(1.0 + g * g - 2.0 * g * theta, 3.0 / 2.0));
}

void main()
{
    uint idIndex = gl_LocalInvocationID.y * LOCAL_SIZE_X + gl_LocalInvocationID.x;

	const vec2 dim = imageSize(calculateLUT);
	const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 normCoords = (coords / (dim - 1));

    float cosResult = -cos((1 - normCoords.y) * PI);  // Get the cosine of the current angle between view and viewer-to-light vectors (increases across y-axis).
    vec3 lightToCam = u_camPos - u_lightPos;
    float vecLengthSqr = dot(lightToCam, lightToCam);
    float vecLength = sqrt(vecLengthSqr);

    float t0 = max(vecLength - u_lightZFar, 0.0);
    float tRange = vecLength + u_lightZFar - t0;
    float t = t0 + (normCoords.x * tRange);

    float WdotV = cosResult * vecLength;
    float dSqr = max(vecLengthSqr + 2.0 * WdotV * t + t * t, 0.0);
    float d = sqrt(dSqr);
    float cosPhi = (t > 0 && d > 0) ? (t * t + dSqr - vecLengthSqr) / (2 * t * d) : cosResult;

    float phase = PhaseHG(-cosPhi, u_gParam);
    float attenuation = PhongAttenuation(d);

    float scattering = phase * attenuation;

    scattering *= tRange / dim.x;
    scattering /= 200.0;

    accumP[idIndex] = scattering;

    barrier();

    for (uint i = 1; i < 32; i *= 2)
        if (gl_LocalInvocationID.x >= i)
        {
            accumP[idIndex] += accumP[idIndex - i];
        }

    const float LUT_SCALE = 32.0 / 32768.0;
    imageStore(calculateLUT, coords, vec4(accumP[idIndex].rrr / LUT_SCALE, LUT_SCALE));
}